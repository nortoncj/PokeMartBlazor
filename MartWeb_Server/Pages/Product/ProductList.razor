@page "/product"
@inject ICategoryRepository _categoryRepository
@inject IProductRepository _productRepository
@inject IJSRuntime _jsRuntime
<_DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Product List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="product/create" class="btn btn-primary form-control">Add New Product</a>
    </div>
    <div class="col-12">
        @if (Products.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Shop Favorites</th>
                        <th>Customer Favorites</th>
                        <th>Category</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var prod in Products)
                    {
                        <tr>
                            <td>
                                @prod.Name
                            </td>
                            <td>
                                <th> <input type="checkbox" disabled checked="@prod.ShopFavorites"> </th>
                            </td>
                            <td>
                                <th> <input type="checkbox" disabled checked="@prod.CustomerFavorites"> </th>
                            </td>
                            <td>
                                @prod.Category.Name
                            </td>
                            <td>
                                <NavLink href="@($"product/edit/{prod.Id}")" class="btn btn-success">Edit</NavLink>
                                <NavLink @onclick="() =>HandleDelete(prod.Id)" class="btn btn-danger">Delete</NavLink>
                                
                            </td>
                            
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                //loading gif
                <div class="d-flex justify-content-center">
                  <div class="spinner-border" role="status">
                    <span class="sr-only"></span>
                  </div>
                </div>
            }else
            {
                //no records
                <p>No records found</p>
            }
        }
    </div>
</div>


@code {
    private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    public bool IsLoading { get; set; }
    private int DeleteProductId { get; set; } = 0;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await LoadProducts();
        }
    }

    private async Task LoadProducts()
    {
        IsLoading = true;
        StateHasChanged();
        Products = await _productRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteProductId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");

    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;

        if(isConfirmed && DeleteProductId != 0)
        {
            //delete
           await _productRepository.Delete(DeleteProductId);
            await LoadProducts();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }

        IsLoading = false;
    }
}
